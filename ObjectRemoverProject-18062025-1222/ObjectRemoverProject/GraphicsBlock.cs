using iText.Kernel.Geom;
using iText.Kernel.Pdf;
using System.Collections.Generic;
using System.Linq;

namespace ObjectRemoverProject
{
    public class GraphicsBlock
    {
        
        public GraphicsBlock()
        {
            Lines = new List<string>();
            Children = new List<GraphicsBlock>();
            ChildrenIds = new List<int>();
            Index = -1;
        }

        public List<string> Lines { get; set; }
        public List<GraphicsBlock> Children { get; set; }
        public List<int> ChildrenIds { get; set; }
        public GraphicsBlock Parent { get; set; }
        public int Index;
        public int PageNo;

        /// <summary>
        /// Get the Total number of lines that can be generated by this block
        /// </summary>
        /// <returns>Total number of lines</returns>
        public int GetTotalLines()
        {
            int length = Lines.Count;
            foreach (var child in Children)
            {
                length += child.GetTotalLines();
            }
            return length;
        }

        /// <summary>
        /// Form a Content string including the child's content string
        /// </summary>
        /// <returns>Content String of this block</returns>
        public string GetFormattedString()
        {
            List<string> result = new List<string>();

            if (Lines.Count == 0)
            {
                result.Add("q");
                foreach (var child in Children)
                {
                    result.Add(child.GetFormattedString());
                }
                result.Add("Q");
            }
            int currentIndex = 0;
            List<GraphicsBlock> childInsert;
            for (int i = 0; i < Lines.Count; i++)
            {
                childInsert = Children.Where(x => x.Index - Index == currentIndex).ToList();
                while (childInsert.Count != 0)
                {
                    foreach (var child in childInsert)
                    {
                        var childLines = child.GetFormattedString();
                        result.Add(childLines);
                        currentIndex += child.GetTotalLines();
                    }

                    childInsert = Children.Where(x => x.Index - Index == currentIndex).ToList();
                }
                result.Add(Lines[i]);
                currentIndex += 1;
            }
            childInsert = Children.Where(x => x.Index - Index == currentIndex).ToList();
            while (childInsert.Count != 0)
            {
                foreach (var child in childInsert)
                {
                    var childLines = child.GetFormattedString();
                    result.Add(childLines);
                    currentIndex += child.GetTotalLines();
                }
                childInsert = Children.Where(x => x.Index - Index == currentIndex).ToList();
            }
            return string.Join("\n", result.ToArray());
        }

        /// <summary>
        /// Form a content string doesn't include the child's content string
        /// </summary>
        /// <returns>Content string of this block only</returns>
        public string GetOwnString()
        {
            return string.Join("\n", Lines);
        }
    }
}
